pentru a folosi mai putina memorie, am folosit un vector de masti de 8 biti
pentru stari/noduri

Pentru o stare oarecare, masca de biti states_mask[i] are urmatoarea
semnificatie:

7 6 5 4 3 2 1 0
0 0 0 0 0 0 0 0
          | | |
          | | |
          | | setat daca starea e finala
          | |
          | setat daca starea e productiva
          setat daca starea e vizitata

Ca sa gasesti cel mai scurt sir de sincronizare e NP Hard si de aia se facea
automatul ala in care combinai toate submultimile de stari si iesea
complexitate exponentiala.
Ca sa gasesti unul oarecare, aplici algoritmul cu automatul produs prezentat in
documentatie.
